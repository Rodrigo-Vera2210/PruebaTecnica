// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PruebaTecnica.Model;

#nullable disable

namespace PruebaTecnica.Model.Migrations
{
    [DbContext(typeof(PruebaTecnicaDbContext))]
    [Migration("20240813061524_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PruebaTecnicaAPI.Model.DatoSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("CodigoParametro")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaDato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreParametro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParametroSensoresId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorNumero")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ParametroSensoresId");

                    b.ToTable("DatosSensores");
                });

            modelBuilder.Entity("PruebaTecnicaAPI.Model.ParametroSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CodigoParametro")
                        .HasColumnType("bigint");

                    b.Property<string>("DescripcionCorta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescripcionLarga")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescripcionMedia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParametrosSensores");
                });

            modelBuilder.Entity("PruebaTecnicaAPI.Model.DatoSensor", b =>
                {
                    b.HasOne("PruebaTecnicaAPI.Model.ParametroSensor", "ParametroSensor")
                        .WithMany("DatosSensores")
                        .HasForeignKey("ParametroSensoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParametroSensor");
                });

            modelBuilder.Entity("PruebaTecnicaAPI.Model.ParametroSensor", b =>
                {
                    b.Navigation("DatosSensores");
                });
#pragma warning restore 612, 618
        }
    }
}
